apiVersion: v1
kind: Template
objects:
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      labels:
        name: event-data-spreader-build-pipeline
      name: event-data-spreader-build-pipeline
    spec:
      nodeSelector: {}
      output: {}
      postCommit: {}
      resources: {}
      serviceAccount: builder
      strategy:
        jenkinsPipelineStrategy:
          jenkinsfile: |-
            try {
              timeout(time: 60, unit: 'MINUTES') {
                podTemplate(
                  label: 'event-data-spreader-builder',
                  cloud: 'openshift', //This needs to match the cloud name in jenkins-kubernetes-plugin config
                  containers: [
                    //Jenkins agent. Also executes the integration test. Having a 'jnlp' container is mandatory.
                    containerTemplate(name: 'jnlp',
                                      image: 'openshift/jenkins-agent-maven-35-centos7:v3.11',
                                      resourceLimitMemory: '512Mi',
                                      args: '${computer.jnlpmac} ${computer.name}',
                                      envVars: [
                                        //Heap for mvn and surefire process is 1/4 of resourceLimitMemory by default
                                        envVar(key: 'JNLP_MAX_HEAP_UPPER_BOUND_MB', value: '64')
                                      ]),
                    containerTemplate(name: 'zookeeper',
                                      image: 'debezium/zookeeper:0.10',
                                      resourceLimitMemory: '128Mi'),
                    containerTemplate(name: 'kafka',
                                      image: 'debezium/kafka:0.10',
                                      resourceLimitMemory: '512Mi',
                                      envVars: [
                                        envVar(key: 'ZOOKEEPER_CONNECT', value: 'localhost:2181'),
                                        envVar(key: 'CREATE_TOPICS', value: 'event:1:1:compact,aggregaterootprojection:1:1:compact,flyway_schema_history:1:1:compact,test:1:1:compact')
                                      ]),
                    containerTemplate(name: 'connect',
                                      image: 'debezium/connect:0.10',
                                      resourceLimitMemory: '128Mi',
                                      envVars: [
                                        envVar(key: 'BOOTSTRAP_SERVERS', value: 'localhost:9092'),
                                        envVar(key: 'GROUP_ID', value: '1'),
                                        envVar(key: 'CONFIG_STORAGE_TOPIC', value: 'my_connect_configs'),
                                        envVar(key: 'OFFSET_STORAGE_TOPIC', value: 'my_connect_offsets'),
                                        envVar(key: 'STATUS_STORAGE_TOPIC', value: 'my_connect_statuses')
                                      ]),
                    containerTemplate(name: 'db',
                                      image: 'dcdh1983/postgresql-10-debezium-centos7',
                                      resourceLimitMemory: '128Mi',
                                      envVars: [
                                        envVar(key: 'POSTGRESQL_USER', value: 'postgres'),
                                        envVar(key: 'POSTGRESQL_PASSWORD', value: 'postgres'),
                                        envVar(key: 'POSTGRESQL_DATABASE', value: 'db')
                                      ])
                  ]) {
                  node("event-data-spreader-builder") {
                    stage("prepare test") {
                      container("db") {
                        sh "psql -U postgres -tc \"SELECT 1 FROM pg_database WHERE datname = 'eventstore'\" | grep -q 1 || psql -U postgres -c \"CREATE DATABASE eventstore\""
                        sh "psql -U postgres -tc \"SELECT 1 FROM pg_database WHERE datname = 'query'\" | grep -q 1 || psql -U postgres -c \"CREATE DATABASE query\""
                      }
                    }
                    stage("checkout") {
                      git url: "https://github.com/dcdh/event-data-spreader.git", branch: "master"
                    }
                    dir("debezium-event-consumer") {
                      stage("compiling and installing debezium-event-consumer") {
                        sh "mvn clean install"
                      }
                    }
                    dir("query-side") {
                      stage("query side: testing") {
                        sh "mvn test"
                      }
                      stage("query side: installing") {
                        sh "mvn install -Dmaven.test.skip=true"
                      }
                    }
                    dir("write-side") {
                      stage("write side: testing") {
                        sh "mvn test"
                      }
                      stage("write side: installing") {
                        sh "mvn install -Dmaven.test.skip=true"
                      }
                    }
                  }
                }
              }
            } catch (err) {
              echo "in catch block"
              echo "Caught: ${err}"
              currentBuild.result = 'FAILURE'
              throw err
            }
        type: JenkinsPipeline
