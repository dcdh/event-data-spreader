apiVersion: v1
kind: Template
objects:
  - apiVersion: "v1"
    kind: "PersistentVolumeClaim"
    metadata:
      name: "maven-repo"
      namespace: "kubernetes-plugin"
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 10Gi
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      labels:
        name: event-data-spreader-build-pipeline
      name: event-data-spreader-build-pipeline
    spec:
      nodeSelector: {}
      output: {}
      postCommit: {}
      resources: {}
      serviceAccount: builder
      strategy:
        jenkinsPipelineStrategy:
          jenkinsfile: |-
            try {
              timeout(time: 60, unit: 'MINUTES') {
                def label = "event-data-spreader-${UUID.randomUUID().toString()}"
                podTemplate(
                  label: label,
                  cloud: 'openshift', //This needs to match the cloud name in jenkins-kubernetes-plugin config
                  containers: [
                    //Jenkins agent. Also executes the integration test. Having a 'jnlp' container is mandatory.
                    containerTemplate(name: 'jnlp',
                                      image: 'openshift/jenkins-agent-maven-35-centos7:v3.11',
                                      resourceLimitMemory: '512Mi',
                                      args: '${computer.jnlpmac} ${computer.name}',
                                      envVars: [
                                        //Heap for mvn and surefire process is 1/4 of resourceLimitMemory by default
                                        envVar(key: 'JNLP_MAX_HEAP_UPPER_BOUND_MB', value: '64')
                                      ]),
                    containerTemplate(name: 'zookeeper',
                                      image: 'debezium/zookeeper:0.10',
                                      resourceLimitMemory: '128Mi'),
                    containerTemplate(name: 'kafka',
                                      image: 'debezium/kafka:0.10',
                                      resourceLimitMemory: '512Mi',
                                      envVars: [
                                        envVar(key: 'ZOOKEEPER_CONNECT', value: 'localhost:2181'),
                                        envVar(key: 'HOST_NAME', value: 'localhost'),
                                        envVar(key: 'ADVERTISED_HOST_NAME', value: 'localhost'),
                                        envVar(key: 'CREATE_TOPICS', value: 'event:1:1:compact,aggregaterootprojection:1:1:compact,flyway_schema_history:1:1:compact,test:1:1:compact')
                                      ]),
                    containerTemplate(name: 'connect',
                                      image: 'debezium/connect:0.10',
                                      resourceLimitMemory: '1Gi',
                                      envVars: [
                                        envVar(key: 'BOOTSTRAP_SERVERS', value: 'localhost:9092'),
                                        envVar(key: 'HOST_NAME', value: 'localhost'),
                                        envVar(key: 'GROUP_ID', value: '1'),
                                        envVar(key: 'CONFIG_STORAGE_TOPIC', value: 'my_connect_configs'),
                                        envVar(key: 'OFFSET_STORAGE_TOPIC', value: 'my_connect_offsets'),
                                        envVar(key: 'STATUS_STORAGE_TOPIC', value: 'my_connect_statuses')
                                      ]),
                    containerTemplate(name: 'database',
                                      image: 'dcdh1983/postgresql-10-debezium-centos7:latest',
                                      resourceLimitMemory: '128Mi',
                                      envVars: [
                                        envVar(key: 'POSTGRESQL_USER', value: 'postgresuser'),
                                        envVar(key: 'POSTGRESQL_PASSWORD', value: 'postgrespassword'),
                                        envVar(key: 'POSTGRESQL_DATABASE', value: 'db')
                                      ]),
                    containerTemplate(name: 'debug',
                                      image: 'busybox',
                                      resourceLimitMemory: '128Mi',
                                      command: "cat",
                                      ttyEnabled: true)
                  ],
                  volumes: [
                    persistentVolumeClaim(mountPath: '/home/jenkins/.m2/repository', claimName: 'maven-repo', readOnly: false)
                  ]) {
                  node(label) {
                    String mavenSettingsXmlPathOption = "-s /home/jenkins/settings.xml"
                    stage("prepare env") {
                      container('jnlp') {
                        String settingsXml = """
                        <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
                                  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                                  xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0
                                  https://maven.apache.org/xsd/settings-1.0.0.xsd">
                          <servers>
                            <server>
                              <id>nexus3-snapshot-repository</id>
                              <username>admin</username>
                              <password>admin123</password>
                            </server>
                            <server>
                              <id>nexus3-release-repository</id>
                              <username>admin</username>
                              <password>admin123</password>
                            </server>
                          </servers>
                          <profiles>
                            <profile>
                              <id>nexus3</id>
                              <properties>
                                <altDeploymentRepository>nexus3-snapshot-repository::default::http://$NEXUS_SERVICE_HOST:$NEXUS_SERVICE_PORT/repository/maven-snapshots/</altDeploymentRepository>
                                <altSnapshotDeploymentRepository>nexus3-snapshot-repository::default::http://$NEXUS_SERVICE_HOST:$NEXUS_SERVICE_PORT/repository/maven-snapshots/</altSnapshotDeploymentRepository>
                                <altReleaseDeploymentRepository>nexus3-release-repository::default::https://$NEXUS_SERVICE_HOST:$NEXUS_SERVICE_PORT/repository/maven-releases/</altReleaseDeploymentRepository>
                              </properties>
                            </profile>
                          </profiles>

                          <activeProfiles>
                            <activeProfile>nexus3</activeProfile>
                          </activeProfiles>

                          <mirrors>
                            <mirror>
                              <id>nexus</id>
                              <mirrorOf>*</mirrorOf>
                              <url>http://$NEXUS_SERVICE_HOST:$NEXUS_SERVICE_PORT/repository/maven-all-public/</url>
                            </mirror>
                          </mirrors>
                        </settings>
                        """
                        sh "echo '${settingsXml}' > $HOME/settings.xml"
                      }
                    }
                    stage("prepare test") {
                      container("database") {
                        sh "printenv | sort"
                        sh "psql -U postgres -tc \"SELECT 1 FROM pg_database WHERE datname = 'eventstore'\" | grep -q 1 || psql -U postgres -c \"CREATE DATABASE eventstore\" &&  psql -U postgres -c \"GRANT ALL PRIVILEGES ON DATABASE eventstore TO postgresuser;\""
                        sh "psql -U postgres -tc \"SELECT 1 FROM pg_database WHERE datname = 'query'\" | grep -q 1 || psql -U postgres -c \"CREATE DATABASE query\" &&  psql -U postgres -c \"GRANT ALL PRIVILEGES ON DATABASE query TO postgresuser;\""
                      }
                    }
                    stage("checkout") {
                      git url: "https://github.com/dcdh/event-data-spreader.git", branch: "master"
                    }
                    stage("install and deploy") {
                      sh "mvn $mavenSettingsXmlPathOption clean install deploy"
                    }
                  }
                }
              }
            } catch (err) {
              echo "in catch block"
              echo "Caught: ${err}"
              currentBuild.result = 'FAILURE'
              throw err
            }
        type: JenkinsPipeline
